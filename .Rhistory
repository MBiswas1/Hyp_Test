plot(log_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Linear Kernel on Beta3")
lines(log_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(qog_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Quadratic Kernel on Beta3")
lines(qog_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(gog_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Gaussian Kernel on Beta3")
lines(gog_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot.new()
plot.new()
plot.new()
legend("center", ncol = 1,  legend=c("T1", "T2"), title = "Test Statistic",
lty=2:1, cex = 0.64)
del <- 11
seq40 <- seq(0, 10, length = del)
par(mfrow=c(4,3), oma = c(0, 0, 0, 0))
plot(lol_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Linear Kernel on Beta1")
lines(lol_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(qol_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Quadratic Kernel on Beta1")
lines(qol_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(gol_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Gaussian Kernel on Beta1")
lines(gol_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(loq_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Linear Kernel on Beta2")
lines(loq_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(qoq_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Quadratic Kernel on Beta2")
lines(qoq_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(goq_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Gaussian Kernel on Beta2")
lines(goq_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(log_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Linear Kernel on Beta3")
lines(log_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(qog_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Quadratic Kernel on Beta3")
lines(qog_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(gog_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Gaussian Kernel on Beta3")
lines(gog_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot.new()
plot.new()
plot.new()
legend("center", ncol = 1,  legend=c("T1", "T2"), title = "Test Statistic",
lty=2:1, cex = 0.64)
del <- 11
seq40 <- seq(0, 10, length = del)
par(mfrow=c(3,3), oma = c(0, 0, 0, 0))
plot(lol_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Linear Kernel on Beta1")
lines(lol_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(qol_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Quadratic Kernel on Beta1")
lines(qol_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(gol_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Gaussian Kernel on Beta1")
lines(gol_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(loq_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Linear Kernel on Beta2")
lines(loq_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(qoq_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Quadratic Kernel on Beta2")
lines(qoq_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(goq_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Gaussian Kernel on Beta2")
lines(goq_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(log_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Linear Kernel on Beta3")
lines(log_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(qog_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Quadratic Kernel on Beta3")
lines(qog_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(gog_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Gaussian Kernel on Beta3")
lines(gog_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
par(mfrow=c(3,3), oma = c(0, 0, 0, 0), cex = 0.9)
plot(lol_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Linear Kernel on Beta1")
lines(lol_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(qol_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Quadratic Kernel on Beta1")
par(mfrow=c(3,3), oma = c(0, 0, 0, 0), cex = 0.5)
plot(lol_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Linear Kernel on Beta1")
lines(lol_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(qol_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Quadratic Kernel on Beta1")
lines(qol_ns40, lty = 2)
par(mfrow=c(4,3), oma = c(0, 0, 0, 0), cex = 0.5)
plot(lol_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Linear Kernel on Beta1")
lines(lol_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(qol_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Quadratic Kernel on Beta1")
lines(qol_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(gol_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Gaussian Kernel on Beta1")
lines(gol_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(loq_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Linear Kernel on Beta2")
lines(loq_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(qoq_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Quadratic Kernel on Beta2")
lines(qoq_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(goq_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Gaussian Kernel on Beta2")
lines(goq_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(log_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Linear Kernel on Beta3")
lines(log_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(qog_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Quadratic Kernel on Beta3")
lines(qog_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(gog_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Gaussian Kernel on Beta3")
lines(gog_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot.new()
plot.new()
plot.new()
legend("center", ncol = 1,  legend=c("T1", "T2"), title = "Test Statistic",
lty=2:1, cex = 0.64)
legend("center", ncol = 1,  legend=c("T1", "T2"), title = "Test Statistic",
lty=2:1)
legend("center", ncol = 2,  legend=c("T1", "T2"), title = "Test Statistic",
lty=2:1)
legend("center", ncol = 2,  legend=c("T1", "T2"), title = "Test Statistic",
lty=2:1)
save.image("C:/partition1/NCSU/Research/Dr. Maity/plots_fnonscalar_40.RData")
load("C:/partition1/NCSU/Research/Dr. Maity/plots_fnonscalar_100.RData")
del <- 9
seq100 <- seq(0, 4, length = del)
par(mfrow=c(4,3), oma = c(0,0,0,0), cex = 0.5)
plot(lol_s100, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Linear Kernel on Beta1")
lines(lol_ns100, lty = 2)
axis(1, at = 1:del, labels = seq100)
plot(qol_s100, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Quadratic Kernel on Beta1")
lines(qol_ns100, lty = 2)
axis(1, at = 1:del, labels = seq100)
plot(gol_s100, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Gaussian Kernel on Beta1")
lines(gol_ns100, lty = 2)
axis(1, at = 1:del, labels = seq100)
plot(loq_s100, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Linear Kernel on Beta2")
lines(loq_ns100, lty = 2)
axis(1, at = 1:del, labels = seq100)
plot(qoq_s100, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Quadratic Kernel on Beta2")
lines(qoq_ns100, lty = 2)
axis(1, at = 1:del, labels = seq100)
plot(goq_s100, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Gaussian Kernel on Beta2")
lines(goq_ns100, lty = 2)
axis(1, at = 1:del, labels = seq100)
plot(log_s100, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Linear Kernel on Beta3")
lines(log_ns100, lty = 2)
axis(1, at = 1:del, labels = seq100)
plot(qog_s100, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Quadratic Kernel on Beta3")
lines(qog_ns100, lty = 2)
axis(1, at = 1:del, labels = seq100)
plot(gog_s100, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Gaussian Kernel on Beta3")
lines(gog_ns100, lty = 2)
axis(1, at = 1:del, labels = seq100)
plot.new()
plot.new()
plot.new()
legend("center", ncol = 2,  legend=c("T1", "T2"), title = "Test Statistic",
lty=2:1)
legend("center", ncol = 2,  legend=c("T1", "T2"), title = "Test Statistic",
lty=2:1)
legend("center", ncol = 2,  legend=c("T1", "T2"), title = "Test Statistic",
lty=2:1, cex = 1.5)
load("C:/partition1/NCSU/Research/Dr. Maity/plots_fnonscalar_40.RData")
load("C:/partition1/NCSU/Research/Dr. Maity/pow_lol_nosig_40.Rdata")
lol_ns40 <- pow
load("C:/partition1/NCSU/Research/Dr. Maity/pow_lol_sig_40.Rdata")
lol_s40 <- pow
del <- 11
seq40 <- seq(0, 10, length = del)
par(mfrow=c(4,3), oma = c(0, 0, 0, 0), cex = 0.5)
plot(lol_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Linear Kernel on Beta1")
lines(lol_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(qol_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Quadratic Kernel on Beta1")
lines(qol_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(gol_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Gaussian Kernel on Beta1")
lines(gol_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(loq_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Linear Kernel on Beta2")
lines(loq_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(qoq_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Quadratic Kernel on Beta2")
lines(qoq_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(goq_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Gaussian Kernel on Beta2")
lines(goq_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(log_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Linear Kernel on Beta3")
lines(log_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(qog_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Quadratic Kernel on Beta3")
lines(qog_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(gog_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Gaussian Kernel on Beta3")
lines(gog_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot.new()
plot.new()
plot.new()
legend("center", ncol = 2,  legend=c("T1", "T2"), title = "Test Statistic",
lty=2:1, cex = 1.5)
legend("center", ncol = 2,  legend=c("T1", "T2"), title = "Test Statistic",
lty=2:1, cex = 1.5)
legend("center", ncol = 2,  legend=c("T1", "T2"), title = "Test Statistic",
lty=2:1, cex = 1.2)
del <- 11
seq40 <- seq(0, 10, length = del)
par(mfrow=c(4,3), oma = c(0, 0, 0, 0), cex = 0.5)
plot(lol_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Linear Kernel on Beta1")
lines(lol_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(qol_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Quadratic Kernel on Beta1")
lines(qol_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(gol_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Gaussian Kernel on Beta1")
lines(gol_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(loq_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Linear Kernel on Beta2")
lines(loq_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(qoq_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Quadratic Kernel on Beta2")
lines(qoq_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(goq_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Gaussian Kernel on Beta2")
lines(goq_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(log_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Linear Kernel on Beta3")
lines(log_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(qog_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Quadratic Kernel on Beta3")
lines(qog_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot(gog_s40, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Gaussian Kernel on Beta3")
lines(gog_ns40, lty = 2)
axis(1, at = 1:del, labels = seq40)
plot.new()
plot.new()
plot.new()
legend("center", ncol = 2,  legend=c("T1", "T2"), title = "Test Statistic",
lty=2:1, cex = 1.2)
?eigs_sym
??eigs_sym
load("C:/partition1/NCSU/Research/Dr. Maity/pow_perm_sig_40.RData")
n <- length(m.i)
install.packages("Package1")
library(devtools)
library(roxygen2)
document("Package1")
?tolist
?face.sparse
library(glmnet)
library(refund)
library(rARPACK)
?face.sparse
#Missing data
#Sigma in T
#time incorporated in kernel
#Permutation method
require(mvtnorm)
require(mgcv)
require(kernlab)
require(glmnet)
require(refund)
require(fpca)
require(face)
require(rARPACK)
#setwd("/mnt/home/mbiswas")
# Getting the intervals
dis.uni <- function(n)
{
m.i <- rep(51, n)
return(m.i)
}
# generate t
t.gen <- function(m)
{
return(seq(0,1,len = m))
}
# generate mu
mu.gen <- function(t)
{
return(t)
}
# Generate error
err.gen<- function(n, m, t)
{
zi <- rmvnorm(n,,diag(c(1, 2)))
wn <- matrix(rnorm(n*m), n)
fn <- sqrt(2) * rbind(cos(2 * pi * t), sin(2 * pi * t))
e <- zi %*% fn + wn
return(t(e))
}
# Generate X1
x1.gen<- function(n,q)
{
return(t(rmvnorm(n,,diag(q))))
}
data.gen <- function(n, m, t, q, seed = 1000, prob)
{
set.seed(seed)
X <- x1.gen(n,q)
Z <- gen.cov(n, prob)
m.i <- dis.uni(n)
index <- NULL
t.star <- NULL
for(i in 1:n)
{
index[[i]] <- sort(sample(seq(1:m), m.i[i]), decreasing = FALSE)
t.star[[i]] <- t[index[[i]]]
}
return(list(X = X, Z = Z, t.star=t.star, index = index, m.i = m.i))
}
ker.X <- function(X, E)
{
X.star <- t(X) %*% X
K <- kronecker(X.star, E)
return(K)
}
# ker.X2 <- function(X,t, m,)
# {
#   t <- as.matrix(t)
#   c <- sum(outer(seq(1:m), seq(1:m), function(i,j) exp(-abs(t[i]-t[j]))))
#   K <- c*t(X)%*%X
#   return(K)
# }
kern.miss <- function(index.star, K)
{
K.star <- K[index.star,index.star]
return(K.star)
}
est.sig <- function(Y, m, m.i, t, t.star, seq, m.i.cum.low, m.i.cum, n, index)
{
l <- length(unlist(t.star))
dat <- data.frame(subj = c(unlist(sapply(seq, function(x) rep(x, m.i[x])))),
argvals = unlist(t.star),
y = unlist(Y))
f <- face.sparse(dat, argvals.new = t)
eval <- f$eigenvalues
evec <- f$eigenfunctions
if(f$var.error.hat[1] != 0)
{f2 <- f$var.error.hat[1]}else
f2 <- mean((f$Y-f$Yhat)^2, na.rm=TRUE)
if(length(eval) == 1)
{  sig <- eval * evec %*% t(evec) + f2*diag(m)
}else
sig <- evec%*%diag(eval)%*%t(evec) + f2*diag(m)
#abc <- sig[unlist(index),unlist(index)]
#prev line gave matrix with non 0 off diag. Can we fix this?
sigi <- solve(sig)
ABC <- matrix(0, l, l)
for(i in 1:n)
ABC[m.i.cum.low[i]:m.i.cum[i], m.i.cum.low[i]:m.i.cum[i]] <- sigi[unlist(index[i]), unlist(index[i])]
#as.matrix(bdiag(list(matrix(seq(1:4),2), matrix(seq(1:9),3))))
return(list(sig = sig, sigi = ABC, eval = eval, evec = evec, f2 = f2))
}
test.stat <- function(Y.sigi, K)
{
T <- t(Y.sigi) %*% K %*% Y.sigi
return(T)
}
# distn <- function(X, t, m, n, index, sigma, c)
# {
#   # y <- multi(n, m, eval, evec, f2)
#   y <- mvrnorm(n, rep(0, m), sigma)
#   K <- ker.X(X, t, c)
#   Y.0 <- matrix(0,m,n)
#   for(i in 1:n)
#     Y.0[index[[i]],i] <- y[i, index[[i]]]
#   T <- sum(Y.0 %*% K %*% t(Y.0))
#   return(T)
#
# }
gen.cov <- function(n, prob)
{
z0 <- rep(1, n)
z1 <- rnorm(n)
z2 <- rbinom(n, 1, prob)
return(rbind(z0, z1, z2))
}
gen.eta <- function(t)
{
mu <- mu.gen(t)
eta1 <- sin(2*pi*t)
eta2 <- cos(2*pi*t)
return(rbind(mu, eta1, eta2))
}
tolist <- function(Y, m.i, n)
{
c <- 1
Y.l <- NULL
for(i in 1:n)
{
Y.l[[i]] <- Y[c : (c + m.i[i] - 1)]
c <- c + m.i[i]
}
return(Y.l)
}
get.half <- function(sigi)
{
svd <- svd(sigi)
half <- svd$u %*% diag(sqrt(svd$d)) %*% t(svd$v)
return(half)
}
get.eigen <- function(sig.star, m)
{
eigen <- eigs_sym(sig.star, m)
return(eigen)
}
gen.beta <- function(x,t)
{
return(kronecker(t(colMeans(x)),t))
}
y.gen <- function(X, Z, t, delta, n, m, index)
{
Y.star <- t(gen.eta(t)) %*% Z + delta * gen.beta(X,t) + err.gen(n, m, t)
Y.star2 <- NULL
for(i in 1:n)
Y.star2[[i]] <- Y.star[index[[i]],i]
return(Y.star2)
}
ker <- function(K, index.star2)
{
#same as ker.miss
K1 <- K[index.star2, index.star2]
return(K1)
}
## Body of code starts here
s <- 2017
n <- 40
rep <- 10
m <- 51
q <- 5
t <- t.gen(m)
sim <- 1000
T1 <- rep(NA, sim)
prob <- 0.4
seq <- seq(1:n)
del <- 11
p.val <- matrix(NA, del, rep)
pow <- rep(NA, del)
E <- exp(-outer(t, t, function(a, b){abs(a-b)}))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
install.packages(c("CompQuadForm", "curl", "XML"))
?gam
fit <- gam(Y~s(T) + s(T, by = Z1) + s(T, by = Z2))
fit <- gam(Y0~s(T) + s(T, by = Z1) + s(T, by = Z2))
install.packages("installr")
library(rinstall)
library(installr)
fit <- gam(Y~s(T) + s(T, by = Z1) + s(T, by = Z2))
load("C:/partition1/NCSU/Research/Dr. Maity/cov_perm.RData")
load("C:/partition1/NCSU/Research/Dr. Maity/cov_perm.RData")
test1 <- test.stat(X, Y.center, c0, sigi, seq)
test1 <- test.stat(X, Y.center, c0, sigi)
c0 <- apply(t, 2, function(i,j) sum(exp(-abs(t[i]-t[j]))))
test1 <- sigi %*% Y.center %*% K %*% t(Y.center) %*% sigi
c0 <- apply(t, 2, function(i,j) sum(exp(-abs(t[i]-t[j]))))
K <- ker.X(X)
ker.X <- function(X)
{
require(kernlab)
kern <- rbfdot(0.5)
seq <- seq(1:ncol(X))
# X.star <- outer(seq, seq, function(i, j) as.numeric(kern(X[,i], X[,j])))
X1 <- sapply(seq, function(j) sapply(seq, function(i) kern(X[,i], X[,j])))
return(X1)
}
K <- ker.X(X)
E <- exp(-outer(t, t, function(a, b){abs(a-b)}))
K <- ker.X(t(X))
test1 <- trace(sigi %*% Y.center %*% K %*% Y.center %*% sigi %*% E)
test1 <- trace(sigi %*% Y.center %*% K %*% t(Y.center) %*% sigi %*% E)
test1 <- trace(sigi %*% Y.center %*% K %*% t(Y.center) %*% sigi %*% E)
test1 <- sigi %*% Y.center %*% K %*% t(Y.center) %*% sigi %*% E
trace(test1)
?trace
test1 <- sum(diag(sigi %*% Y.center %*% K %*% t(Y.center) %*% sigi %*% E))
Y.center2 <- c(Y.center)
l <- 5100
ABC <- matrix(0, l, l)
m.i <- rep(51, 100)
m.i.cum <- cumsum(m.i)
m.i.cum.low <- c(0, m.i.cum[-n])+1
for(i in 1:n)
ABC[m.i.cum.low[i]:m.i.cum[i], m.i.cum.low[i]:m.i.cum[i]] <- sigi[unlist(index[i]), unlist(index[i])]
for(i in 1:n)
ABC[m.i.cum.low[i]:m.i.cum[i], m.i.cum.low[i]:m.i.cum[i]] <- sigi
K2 <- kronecker(K, E)
test2 <- t(Y.center2) %*% ABC %*% K2 %*% ABC %*% Y.center2
t <- t.gen(m)
c0 <- apply(t, 2, function(i,j) sum(exp(-abs(t[i]-t[j]))))
t.gen <- function(m)
{
return(seq(0,1,len = m))
}
t <- t.gen(m)
c0 <- apply(t, 2, function(i,j) sum(exp(-abs(t[i]-t[j]))))
l2 <- sum(K)
test3 <- sum(diag(t(Y.center) %*% sigi %*% E %*% sigi %*% Y.center)) * l2
source('C:/partition1/NCSU/Research/Dr. Maity/pow_lol_sig_40_dense.R')
source('C:/partition1/NCSU/Research/Dr. Maity/pow_lol_sig_40_dense.R')
